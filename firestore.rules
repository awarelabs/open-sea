service cloud.firestore {
	match /databases/{database}/documents {
		function orgNotExists(orgId) {
			return exists(/databases/$(database)/documents/organisations/$(orgId)) == false;
		}

		function currentUserHasAccess(orgId, access) {
			return get(/databases/$(database)/documents/organisations/$(orgId)/users/$(request.auth.uid)).data.access >= access;
		}

		function isPublic(orgId) {
			return resource.data.isPublic == true;
		}

		function isAuthed() {
			return request.auth.uid != null;
		}
    
		function isCurrentUser(uid) {
			return request.auth.uid == uid;
		}

		match /organisations/{orgId} {
			allow read: if orgNotExists(orgId) || isPublic(orgId) || currentUserHasAccess(orgId, 10);
			allow create: if isAuthed() && orgNotExists(orgId);
			allow update: if currentUserHasAccess(orgId, 30);
			allow delete: if currentUserHasAccess(orgId, 100);
			
			match /organisations/{orgOrgId} {
				allow read;
				allow write: if currentUserHasAccess(orgId, 30);
			}

			match /reports/{repId} {
				allow read;
				allow write: if currentUserHasAccess(orgId, 20);
			}

			match /users/{uid} {
				allow read;
				allow write: if currentUserHasAccess(orgId, 30);
			}
			
			match /infographics/{infographicId} {
				allow read;
				allow write: if currentUserHasAccess(orgId, 20);
			}

			match /stakeholdergroups/{sgId} {
				allow read;
				allow write: if currentUserHasAccess(orgId, 20);
			}
			
			match /stakeholders/{sId} {
				allow read;
				allow write: if currentUserHasAccess(orgId, 20);
			}
		}

		match /users/{uid} {
			allow read, create;
			allow update: if isCurrentUser(uid);

			match /organisations/{orgId} {
				allow read;
			}
		}

		match /models/{modelId} {
			allow read, write: if isAuthed();
		}
		match /surveys/{surveyId} {
		 allow read, write: if isAuthed();
		}
  }
}
